From 6b440d65b50f3d2fab0a618e7c35ee6a34cdc1e8 Mon Sep 17 00:00:00 2001
From: Jarod Wilson <jarod@redhat.com>
Date: Mon, 20 Dec 2010 17:29:07 -0500
Subject: [PATCH 09/11] lirc_serial: resync with in-kernel bits

Signed-off-by: Jarod Wilson <jarod@redhat.com>
---
 drivers/lirc_serial/lirc_serial.c |  391 ++++++++++++++++---------------------
 1 files changed, 168 insertions(+), 223 deletions(-)

--- a/drivers/lirc_serial/lirc_serial.c
+++ b/drivers/lirc_serial/lirc_serial.c
@@ -1,4 +1,3 @@
-/*      $Id: lirc_serial.c,v 5.108 2010/08/16 20:20:47 jarodwilson Exp $      */
 /*
  * lirc_serial.c
  *
@@ -49,25 +48,6 @@
  * Steve Davies <steve@daviesfam.org>  July 2001
  */
 
-#ifdef HAVE_CONFIG_H
-# include <config.h>
-#endif
-
-#include <linux/version.h>
-
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
-#include <linux/autoconf.h>
-#endif
-
-#if defined(CONFIG_SERIAL) || defined(CONFIG_SERIAL_8250)
-#warning "******************************************"
-#warning " Your serial port driver is compiled into "
-#warning " the kernel. You will have to release the "
-#warning " port you want to use for LIRC with:      "
-#warning "    setserial /dev/ttySx uart none	"
-#warning "******************************************"
-#endif
-
 #include <linux/module.h>
 #include <linux/errno.h>
 #include <linux/signal.h>
@@ -76,7 +56,6 @@
 #include <linux/interrupt.h>
 #include <linux/ioport.h>
 #include <linux/kernel.h>
-#include <linux/major.h>
 #include <linux/serial_reg.h>
 #include <linux/time.h>
 #include <linux/string.h>
@@ -88,57 +67,39 @@
 #include <linux/platform_device.h>
 
 #include <asm/system.h>
-#include <linux/uaccess.h>
 #include <linux/io.h>
 #include <linux/irq.h>
 #include <linux/fcntl.h>
+#include <linux/spinlock.h>
 
-#ifdef LIRC_SERIAL_NSLU2
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 #include <asm/hardware.h>
+#endif
 /* From Intel IXP42X Developer's Manual (#252480-005): */
 /* ftp://download.intel.com/design/network/manuals/25248005.pdf */
 #define UART_IE_IXP42X_UUE   0x40 /* IXP42X UART Unit enable */
 #define UART_IE_IXP42X_RTOIE 0x10 /* IXP42X Receiver Data Timeout int.enable */
-#ifndef NSLU2_LED_GRN_GPIO
-/* added in 2.6.22 */
-#define NSLU2_LED_GRN_GPIO NSLU2_LED_GRN
-#endif
-#endif
 
-#include "drivers/lirc.h"
 #include "drivers/kcompat.h"
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 35)
+#include <media/lirc.h>
+#include <media/lirc_dev.h>
+#else
+#include "drivers/lirc.h"
 #include "drivers/lirc_dev/lirc_dev.h"
-
-#if defined(LIRC_SERIAL_SOFTCARRIER) && !defined(LIRC_SERIAL_TRANSMITTER)
-#warning "Software carrier only affects transmitting"
 #endif
 
-#ifdef rdtscl
-
-#define USE_RDTSC
-#warning "Note: using rdtsc instruction"
-#endif
-
-#ifdef LIRC_SERIAL_ANIMAX
-#ifdef LIRC_SERIAL_TRANSMITTER
-#warning "******************************************"
-#warning " This receiver does not have a	    "
-#warning " transmitter diode			"
-#warning "******************************************"
-#endif
-#endif
-
-#define LIRC_DRIVER_VERSION "$Revision: 5.108 $"
 #define LIRC_DRIVER_NAME "lirc_serial"
 
 struct lirc_serial {
 	int signal_pin;
 	int signal_pin_change;
-	int on;
-	int off;
+	u8 on;
+	u8 off;
 	long (*send_pulse)(unsigned long length);
 	void (*send_space)(long length);
 	int features;
+	spinlock_t lock;
 };
 
 #define LIRC_HOMEBREW		0
@@ -148,58 +109,17 @@ struct lirc_serial {
 #define LIRC_IGOR		4
 #define LIRC_NSLU2		5
 
-#ifdef LIRC_SERIAL_IRDEO
-static int type = LIRC_IRDEO;
-#elif defined(LIRC_SERIAL_IRDEO_REMOTE)
-static int type = LIRC_IRDEO_REMOTE;
-#elif defined(LIRC_SERIAL_ANIMAX)
-static int type = LIRC_ANIMAX;
-#elif defined(LIRC_SERIAL_IGOR)
-static int type = LIRC_IGOR;
-#elif defined(LIRC_SERIAL_NSLU2)
-static int type = LIRC_NSLU2;
-#else
-static int type = LIRC_HOMEBREW;
-#endif
-
-/* Set defaults for NSLU2 */
-#if defined(LIRC_SERIAL_NSLU2)
-#ifndef LIRC_IRQ
-#define LIRC_IRQ IRQ_IXP4XX_UART2
-#endif
-#ifndef LIRC_PORT
-#define LIRC_PORT (IXP4XX_UART2_BASE_VIRT + REG_OFFSET)
-#endif
-#ifndef LIRC_IOMMAP
-#define LIRC_IOMMAP IXP4XX_UART2_BASE_PHYS
-#endif
-#ifndef LIRC_IOSHIFT
-#define LIRC_IOSHIFT 2
-#endif
-#ifndef LIRC_ALLOW_MMAPPED_IO
-#define LIRC_ALLOW_MMAPPED_IO
-#endif
-#endif
-
-#if defined(LIRC_ALLOW_MMAPPED_IO)
-#ifndef LIRC_IOMMAP
-#define LIRC_IOMMAP 0
-#endif
-#ifndef LIRC_IOSHIFT
-#define LIRC_IOSHIFT 0
-#endif
-static int iommap = LIRC_IOMMAP;
-static int ioshift = LIRC_IOSHIFT;
-#endif
-
-#ifdef LIRC_SERIAL_SOFTCARRIER
+/*** module parameters ***/
+static int type;
+static int io;
+static int irq;
+static int iommap;
+static int ioshift;
 static int softcarrier = 1;
-#else
-static int softcarrier;
-#endif
-
 static int share_irq;
 static int debug;
+static int sense = -1;	/* -1 = auto, 0 = active high, 1 = active low */
+static int txsense;	/* 0 = active high, 1 = active low */
 
 #define dprintk(fmt, args...)					\
 	do {							\
@@ -222,7 +142,7 @@ static struct lirc_serial hardware[] = {
 		.off = (UART_MCR_RTS | UART_MCR_OUT2),
 		.send_pulse = send_pulse_homebrew,
 		.send_space = send_space_homebrew,
-#ifdef LIRC_SERIAL_TRANSMITTER
+#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
 		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
 				LIRC_CAN_SET_SEND_CARRIER |
 				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
@@ -270,7 +190,7 @@ static struct lirc_serial hardware[] = {
 		.off = (UART_MCR_RTS | UART_MCR_OUT2),
 		.send_pulse = send_pulse_homebrew,
 		.send_space = send_space_homebrew,
-#ifdef LIRC_SERIAL_TRANSMITTER
+#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
 		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
 				LIRC_CAN_SET_SEND_CARRIER |
 				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
@@ -279,7 +199,7 @@ static struct lirc_serial hardware[] = {
 #endif
 	},
 
-#ifdef LIRC_SERIAL_NSLU2
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 	/*
 	 * Modified Linksys Network Storage Link USB 2.0 (NSLU2):
 	 * We receive on CTS of the 2nd serial port (R142,LHS), we
@@ -294,7 +214,7 @@ static struct lirc_serial hardware[] = {
 		.off = (UART_MCR_RTS | UART_MCR_OUT2),
 		.send_pulse = send_pulse_homebrew,
 		.send_space = send_space_homebrew,
-#ifdef LIRC_SERIAL_TRANSMITTER
+#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
 		.features    = (LIRC_CAN_SET_SEND_DUTY_CYCLE |
 				LIRC_CAN_SET_SEND_CARRIER |
 				LIRC_CAN_SEND_PULSE | LIRC_CAN_REC_MODE2)
@@ -320,27 +240,11 @@ static struct lirc_serial hardware[] = {
 /* This MUST be a power of two!  It has to be larger than 1 as well. */
 
 #define RBUF_LEN 256
-#define WBUF_LEN 256
-
-static int sense = -1;	/* -1 = auto, 0 = active high, 1 = active low */
-static int txsense;     /* 0 = active high, 1 = active low */
-
-#ifndef LIRC_IRQ
-#define LIRC_IRQ 4
-#endif
-#ifndef LIRC_PORT
-#define LIRC_PORT 0x3f8
-#endif
-
-static int io = LIRC_PORT;
-static int irq = LIRC_IRQ;
 
 static struct timeval lasttv = {0, 0};
 
 static struct lirc_buffer rbuf;
 
-static lirc_t wbuf[WBUF_LEN];
-
 static unsigned int freq = 38000;
 static unsigned int duty_cycle = 50;
 
@@ -349,7 +253,7 @@ static unsigned long period;
 static unsigned long pulse_width;
 static unsigned long space_width;
 
-#ifdef __i386__
+#if defined(__i386__)
 /*
  * From:
  * Linux I/O port programming mini-HOWTO
@@ -383,40 +287,40 @@ static unsigned long space_width;
 #define LIRC_SERIAL_TRANSMITTER_LATENCY 256
 
 #endif  /* __i386__ */
+/*
+ * FIXME: should we be using hrtimers instead of this
+ * LIRC_SERIAL_TRANSMITTER_LATENCY nonsense?
+ */
 
-static unsigned int sinp(int offset)
+/* fetch serial input packet (1 byte) from register offset */
+static u8 sinp(int offset)
 {
-#ifdef LIRC_ALLOW_MMAPPED_IO
-	if (iommap != 0) {
+	if (iommap != 0)
 		/* the register is memory-mapped */
 		offset <<= ioshift;
-		return readb(io + offset);
-	}
-#endif
+
 	return inb(io + offset);
 }
 
-static void soutp(int offset, int value)
+/* write serial output packet (1 byte) of value to register offset */
+static void soutp(int offset, u8 value)
 {
-#ifdef LIRC_ALLOW_MMAPPED_IO
-	if (iommap != 0) {
+	if (iommap != 0)
 		/* the register is memory-mapped */
 		offset <<= ioshift;
-		writeb(value, io + offset);
-	}
-#endif
+
 	outb(value, io + offset);
 }
 
 static void on(void)
 {
-#ifdef LIRC_SERIAL_NSLU2
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 	/*
 	 * On NSLU2, we put the transmit diode between the output of the green
 	 * status LED and ground
 	 */
 	if (type == LIRC_NSLU2) {
-		gpio_line_set(NSLU2_LED_GRN_GPIO, IXP4XX_GPIO_LOW);
+		gpio_line_set(NSLU2_LED_GRN, IXP4XX_GPIO_LOW);
 		return;
 	}
 #endif
@@ -428,9 +332,9 @@ static void on(void)
 
 static void off(void)
 {
-#ifdef LIRC_SERIAL_NSLU2
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 	if (type == LIRC_NSLU2) {
-		gpio_line_set(NSLU2_LED_GRN_GPIO, IXP4XX_GPIO_HIGH);
+		gpio_line_set(NSLU2_LED_GRN, IXP4XX_GPIO_HIGH);
 		return;
 	}
 #endif
@@ -567,7 +471,7 @@ static long send_pulse_irdeo(unsigned lo
 	if (i == 0)
 		ret = (-rawbits) * 10000 / 1152;
 	else
-		ret = (3 - i) * 3 *10000 / 1152 + (-rawbits) * 10000 / 1152;
+		ret = (3 - i) * 3 * 10000 / 1152 + (-rawbits) * 10000 / 1152;
 
 	return ret;
 }
@@ -595,6 +499,13 @@ static long send_pulse_homebrew_softcarr
 	now = start;
 	target = pulse_width;
 	flag = 1;
+	/*
+	 * FIXME: This looks like a hard busy wait, without even an occasional,
+	 * polite, cpu_relax() call.  There's got to be a better way?
+	 *
+	 * The i2c code has the result of a lot of bit-banging work, I wonder if
+	 * there's something there which could be helpful here.
+	 */
 	while ((now - start) < length) {
 		/* Delay till flip time */
 		do {
@@ -685,7 +596,7 @@ static void send_space_homebrew(long len
 	safe_udelay(length);
 }
 
-static void rbwrite(lirc_t l)
+static void rbwrite(int l)
 {
 	if (lirc_buffer_full(&rbuf)) {
 		/* no new signals will be accepted */
@@ -695,10 +606,10 @@ static void rbwrite(lirc_t l)
 	lirc_buffer_write(&rbuf, (void *)&l);
 }
 
-static void frbwrite(lirc_t l)
+static void frbwrite(int l)
 {
 	/* simple noise filter */
-	static lirc_t pulse = 0L, space = 0L;
+	static int pulse, space;
 	static unsigned int ptr;
 
 	if (ptr > 0 && (l & PULSE_BIT)) {
@@ -745,14 +656,15 @@ static irqreturn_t irq_handler(int i, vo
 #endif
 {
 	struct timeval tv;
-	int status, counter, dcd;
+	int counter, dcd;
+	u8 status;
 	long deltv;
-	lirc_t data;
+	int data;
 	static int last_dcd = -1;
 
 	if ((sinp(UART_IIR) & UART_IIR_NO_INT)) {
 		/* not our interrupt */
-		return IRQ_RETVAL(IRQ_NONE);
+		return IRQ_NONE;
 	}
 
 	counter = 0;
@@ -834,7 +746,7 @@ static irqreturn_t irq_handler(int i, vo
 					sense = sense ? 0 : 1;
 				}
 			} else
-				data = (lirc_t) (deltv*1000000 +
+				data = (int) (deltv*1000000 +
 					       tv.tv_usec -
 					       lasttv.tv_usec);
 			frbwrite(dcd^sense ? data : (data|PULSE_BIT));
@@ -843,13 +755,38 @@ static irqreturn_t irq_handler(int i, vo
 			wake_up_interruptible(&rbuf.wait_poll);
 		}
 	} while (!(sinp(UART_IIR) & UART_IIR_NO_INT)); /* still pending ? */
-	return IRQ_RETVAL(IRQ_HANDLED);
+	return IRQ_HANDLED;
 }
 
-static void hardware_init_port(void)
+
+static int hardware_init_port(void)
 {
-	unsigned long flags;
-	local_irq_save(flags);
+	u8 scratch, scratch2, scratch3;
+
+	/*
+	 * This is a simple port existence test, borrowed from the autoconfig
+	 * function in drivers/serial/8250.c
+	 */
+	scratch = sinp(UART_IER);
+	soutp(UART_IER, 0);
+#ifdef __i386__
+	outb(0xff, 0x080);
+#endif
+	scratch2 = sinp(UART_IER) & 0x0f;
+	soutp(UART_IER, 0x0f);
+#ifdef __i386__
+	outb(0x00, 0x080);
+#endif
+	scratch3 = sinp(UART_IER) & 0x0f;
+	soutp(UART_IER, scratch);
+	if (scratch2 != 0 || scratch3 != 0x0f) {
+		/* we fail, there's nothing here */
+		printk(KERN_ERR LIRC_DRIVER_NAME ": port existence test "
+		       "failed, cannot continue\n");
+		return -EINVAL;
+	}
+
+
 
 	/* Set DLAB 0. */
 	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
@@ -864,7 +801,7 @@ static void hardware_init_port(void)
 	sinp(UART_IIR);
 	sinp(UART_MSR);
 
-#ifdef LIRC_SERIAL_NSLU2
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 	if (type == LIRC_NSLU2) {
 		/* Setup NSLU2 UART */
 
@@ -906,7 +843,7 @@ static void hardware_init_port(void)
 		break;
 	}
 
-	local_irq_restore(flags);
+	return 0;
 }
 
 static int init_port(void)
@@ -914,7 +851,6 @@ static int init_port(void)
 	int i, nlow, nhigh;
 
 	/* Reserve io region. */
-#ifdef LIRC_ALLOW_MMAPPED_IO
 	/*
 	 * Future MMAP-Developers: Attention!
 	 * For memory mapped I/O you *might* need to use ioremap() first,
@@ -925,9 +861,6 @@ static int init_port(void)
 				    LIRC_DRIVER_NAME) == NULL))
 	   || ((iommap == 0)
 	       && (request_region(io, 8, LIRC_DRIVER_NAME) == NULL))) {
-#else
-	if (request_region(io, 8, LIRC_DRIVER_NAME) == NULL) {
-#endif
 		printk(KERN_ERR  LIRC_DRIVER_NAME
 		       ": port %04x already in use\n", io);
 		printk(KERN_WARNING LIRC_DRIVER_NAME
@@ -939,7 +872,8 @@ static int init_port(void)
 		return -EBUSY;
 	}
 
-	hardware_init_port();
+	if (hardware_init_port() < 0)
+		return -EINVAL;
 
 	/* Initialize pulse/space widths */
 	init_timing_params(duty_cycle, freq);
@@ -963,16 +897,10 @@ static int init_port(void)
 			msleep(40);
 		}
 		sense = (nlow >= nhigh ? 1 : 0);
-		printk(KERN_INFO  LIRC_DRIVER_NAME  ": auto-detected active "
+		printk(KERN_INFO LIRC_DRIVER_NAME  ": auto-detected active "
 		       "%s receiver\n", sense ? "low" : "high");
-		if(sense == 0)
-		{
-			printk(KERN_INFO  LIRC_DRIVER_NAME  ": this usually "
-			       "means that there is no receiver attached to "
-			       "the selected port");
-		}
 	} else
-		printk(KERN_INFO  LIRC_DRIVER_NAME  ": Manually using active "
+		printk(KERN_INFO LIRC_DRIVER_NAME  ": Manually using active "
 		       "%s receiver\n", sense ? "low" : "high");
 
 	return 0;
@@ -983,10 +911,6 @@ static int set_use_inc(void *data)
 	int result;
 	unsigned long flags;
 
-	/* Init read buffer. */
-	if (lirc_buffer_init(&rbuf, sizeof(lirc_t), RBUF_LEN) < 0)
-		return -ENOMEM;
-
 	/* initialize timestamp */
 	do_gettimeofday(&lasttv);
 
@@ -997,26 +921,24 @@ static int set_use_inc(void *data)
 	switch (result) {
 	case -EBUSY:
 		printk(KERN_ERR LIRC_DRIVER_NAME ": IRQ %d busy\n", irq);
-		lirc_buffer_free(&rbuf);
 		return -EBUSY;
 	case -EINVAL:
 		printk(KERN_ERR LIRC_DRIVER_NAME
 		       ": Bad irq number or handler\n");
-		lirc_buffer_free(&rbuf);
 		return -EINVAL;
 	default:
 		dprintk("Interrupt %d, port %04x obtained\n", irq, io);
 		break;
 	};
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&hardware[type].lock, flags);
 
 	/* Set DLAB 0. */
 	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
 
 	soutp(UART_IER, sinp(UART_IER)|UART_IER_MSI);
 
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&hardware[type].lock, flags);
 
 	return 0;
 }
@@ -1024,7 +946,7 @@ static int set_use_inc(void *data)
 static void set_use_dec(void *data)
 {	unsigned long flags;
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&hardware[type].lock, flags);
 
 	/* Set DLAB 0. */
 	soutp(UART_LCR, sinp(UART_LCR) & (~UART_LCR_DLAB));
@@ -1032,12 +954,11 @@ static void set_use_dec(void *data)
 	/* First of all, disable all interrupts */
 	soutp(UART_IER, sinp(UART_IER) &
 	      (~(UART_IER_MSI|UART_IER_RLSI|UART_IER_THRI|UART_IER_RDI)));
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&hardware[type].lock, flags);
 
 	free_irq(irq, (void *)&hardware);
 
 	dprintk("freed IRQ %d\n", irq);
-	lirc_buffer_free(&rbuf);
 }
 
 static ssize_t lirc_write(struct file *file, const char *buf,
@@ -1046,30 +967,30 @@ static ssize_t lirc_write(struct file *f
 	int i, count;
 	unsigned long flags;
 	long delta = 0;
+	int *wbuf;
 
-	if (!(hardware[type].features&LIRC_CAN_SEND_PULSE))
+	if (!(hardware[type].features & LIRC_CAN_SEND_PULSE))
 		return -EBADF;
 
-	if (n % sizeof(lirc_t))
+	count = n / sizeof(int);
+	if (n % sizeof(int) || count % 2 == 0)
 		return -EINVAL;
-	count = n / sizeof(lirc_t);
-	if (count > WBUF_LEN || count % 2 == 0)
-		return -EINVAL;
-	if (copy_from_user(wbuf, buf, n))
-		return -EFAULT;
-	local_irq_save(flags);
+	wbuf = memdup_user(buf, n);
+	if (PTR_ERR(wbuf))
+		return PTR_ERR(wbuf);
+	spin_lock_irqsave(&hardware[type].lock, flags);
 	if (type == LIRC_IRDEO) {
 		/* DTR, RTS down */
 		on();
 	}
 	for (i = 0; i < count; i++) {
 		if (i%2)
-			hardware[type].send_space(wbuf[i]-delta);
+			hardware[type].send_space(wbuf[i] - delta);
 		else
 			delta = hardware[type].send_pulse(wbuf[i]);
 	}
 	off();
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&hardware[type].lock, flags);
 	return n;
 }
 
@@ -1084,6 +1005,29 @@ static long lirc_ioctl(struct file *file
 	__u32 value;
 
 	switch (cmd) {
+	case LIRC_GET_SEND_MODE:
+		if (!(hardware[type].features&LIRC_CAN_SEND_MASK))
+			return -ENOIOCTLCMD;
+
+		result = put_user(LIRC_SEND2MODE
+				  (hardware[type].features&LIRC_CAN_SEND_MASK),
+				  (__u32 *) arg);
+		if (result)
+			return result;
+		break;
+
+	case LIRC_SET_SEND_MODE:
+		if (!(hardware[type].features&LIRC_CAN_SEND_MASK))
+			return -ENOIOCTLCMD;
+
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		/* only LIRC_MODE_PULSE supported */
+		if (value != LIRC_MODE_PULSE)
+			return -ENOSYS;
+		break;
+
 	case LIRC_GET_LENGTH:
 		return -ENOSYS;
 		break;
@@ -1124,15 +1068,17 @@ static long lirc_ioctl(struct file *file
 	return 0;
 }
 
-static struct file_operations lirc_fops = {
-	.owner	= THIS_MODULE,
-	.write	= lirc_write,
+static const struct file_operations lirc_fops = {
+	.owner		= THIS_MODULE,
+	.write		= lirc_write,
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 35)
-	.ioctl	= lirc_ioctl,
+	.ioctl		= lirc_ioctl,
 #else
 	.unlocked_ioctl	= lirc_ioctl,
 #endif
+#ifdef CONFIG_COMPAT
 	.compat_ioctl	= lirc_ioctl,
+#endif
 	.read		= lirc_dev_fop_read,
 	.poll		= lirc_dev_fop_poll,
 	.open		= lirc_dev_fop_open,
@@ -1154,8 +1100,6 @@ static struct lirc_driver driver = {
 	.owner		= THIS_MODULE,
 };
 
-#ifdef MODULE
-
 static struct platform_device *lirc_serial_dev;
 
 static int __devinit lirc_serial_probe(struct platform_device *dev)
@@ -1187,13 +1131,19 @@ static int lirc_serial_suspend(struct pl
 	return 0;
 }
 
+/* twisty maze... need a forward-declaration here... */
+static void lirc_serial_exit(void);
+
 static int lirc_serial_resume(struct platform_device *dev)
 {
 	unsigned long flags;
 
-	hardware_init_port();
+	if (hardware_init_port() < 0) {
+		lirc_serial_exit();
+		return -EINVAL;
+	}
 
-	local_irq_save(flags);
+	spin_lock_irqsave(&hardware[type].lock, flags);
 	/* Enable Interrupt */
 	do_gettimeofday(&lasttv);
 	soutp(UART_IER, sinp(UART_IER)|UART_IER_MSI);
@@ -1201,7 +1151,7 @@ static int lirc_serial_resume(struct pla
 
 	lirc_buffer_clear(&rbuf);
 
-	local_irq_restore(flags);
+	spin_unlock_irqrestore(&hardware[type].lock, flags);
 
 	return 0;
 }
@@ -1221,10 +1171,15 @@ static int __init lirc_serial_init(void)
 {
 	int result;
 
+	/* Init read buffer. */
+	result = lirc_buffer_init(&rbuf, sizeof(int), RBUF_LEN);
+	if (result < 0)
+		return -ENOMEM;
+
 	result = platform_driver_register(&lirc_serial_driver);
 	if (result) {
 		printk("lirc register returned %d\n", result);
-		return result;
+		goto exit_buffer_free;
 	}
 
 	lirc_serial_dev = platform_device_alloc("lirc_serial", 0);
@@ -1243,13 +1198,16 @@ exit_device_put:
 	platform_device_put(lirc_serial_dev);
 exit_driver_unregister:
 	platform_driver_unregister(&lirc_serial_driver);
+exit_buffer_free:
+	lirc_buffer_free(&rbuf);
 	return result;
 }
 
-static void __exit lirc_serial_exit(void)
+static void lirc_serial_exit(void)
 {
 	platform_device_unregister(lirc_serial_dev);
 	platform_driver_unregister(&lirc_serial_driver);
+	lirc_buffer_free(&rbuf);
 }
 
 static int __init lirc_serial_init_module(void)
@@ -1259,16 +1217,25 @@ static int __init lirc_serial_init_modul
 	result = lirc_serial_init();
 	if (result)
 		return result;
+
 	switch (type) {
 	case LIRC_HOMEBREW:
 	case LIRC_IRDEO:
 	case LIRC_IRDEO_REMOTE:
 	case LIRC_ANIMAX:
 	case LIRC_IGOR:
-#ifdef LIRC_SERIAL_NSLU2
+		/* if nothing specified, use ttyS0/com1 and irq 4 */
+		io = io ? io : 0x3f8;
+		irq = irq ? irq : 4;
+		break;
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 	case LIRC_NSLU2:
-#endif
+		io = io ? io : IRQ_IXP4XX_UART2;
+		irq = irq ? irq : (IXP4XX_UART2_BASE_VIRT + REG_OFFSET);
+		iommap = iommap ? iommap : IXP4XX_UART2_BASE_PHYS;
+		ioshift = ioshift ? ioshift : 2;
 		break;
+#endif
 	default:
 		result = -EINVAL;
 		goto exit_serial_exit;
@@ -1277,7 +1244,9 @@ static int __init lirc_serial_init_modul
 		switch (type) {
 		case LIRC_HOMEBREW:
 		case LIRC_IGOR:
+#ifdef CONFIG_LIRC_SERIAL_NSLU2
 		case LIRC_NSLU2:
+#endif
 			hardware[type].features &=
 				~(LIRC_CAN_SET_SEND_DUTY_CYCLE|
 				  LIRC_CAN_SET_SEND_CARRIER);
@@ -1297,17 +1266,6 @@ static int __init lirc_serial_init_modul
 		result = -EIO;
 		goto exit_release;
 	}
-
-	printk(KERN_INFO
-	       LIRC_DRIVER_NAME " " LIRC_DRIVER_VERSION " registered\n");
-	dprintk("type = %d\n", type);
-	dprintk("IRQ = %d, port = %04x\n", irq, io);
-	dprintk("share_irq = %d\n", share_irq);
-#ifdef LIRC_SERIAL_TRANSMITTER
-	dprintk("txsense = %d\n", txsense);
-#endif
-	dprintk("softcarrier = %d\n", softcarrier);
-
 	return 0;
 exit_release:
 	release_region(io, 8);
@@ -1319,14 +1277,10 @@ exit_serial_exit:
 static void __exit lirc_serial_exit_module(void)
 {
 	lirc_serial_exit();
-#ifdef LIRC_ALLOW_MMAPPED_IO
 	if (iommap != 0)
 		release_mem_region(iommap, 8 << ioshift);
 	else
 		release_region(io, 8);
-#else
-	release_region(io, 8);
-#endif
 	lirc_unregister_driver(driver.minor);
 	dprintk("cleaned up module\n");
 }
@@ -1341,19 +1295,13 @@ MODULE_AUTHOR("Ralph Metzler, Trent Piep
 MODULE_LICENSE("GPL");
 
 module_param(type, int, S_IRUGO);
-#ifdef LIRC_SERIAL_NSLU2
 MODULE_PARM_DESC(type, "Hardware type (0 = home-brew, 1 = IRdeo,"
 		 " 2 = IRdeo Remote, 3 = AnimaX, 4 = IgorPlug,"
 		 " 5 = NSLU2 RX:CTS2/TX:GreenLED)");
-#else
-MODULE_PARM_DESC(type, "Hardware type (0 = home-brew, 1 = IRdeo,"
-		 " 2 = IRdeo Remote, 3 = AnimaX, 4 = IgorPlug)");
-#endif
 
 module_param(io, int, S_IRUGO);
 MODULE_PARM_DESC(io, "I/O address base (0x3f8 or 0x2f8)");
 
-#ifdef LIRC_ALLOW_MMAPPED_IO
 /* some architectures (e.g. intel xscale) have memory mapped registers */
 module_param(iommap, bool, S_IRUGO);
 MODULE_PARM_DESC(iommap, "physical base for memory mapped I/O"
@@ -1366,7 +1314,6 @@ MODULE_PARM_DESC(iommap, "physical base
  */
 module_param(ioshift, int, S_IRUGO);
 MODULE_PARM_DESC(ioshift, "shift I/O register offset (0 = no shift)");
-#endif
 
 module_param(irq, int, S_IRUGO);
 MODULE_PARM_DESC(irq, "Interrupt (4 or 3)");
@@ -1378,16 +1325,14 @@ module_param(sense, bool, S_IRUGO);
 MODULE_PARM_DESC(sense, "Override autodetection of IR receiver circuit"
 		 " (0 = active high, 1 = active low )");
 
-#ifdef LIRC_SERIAL_TRANSMITTER
+#ifdef CONFIG_LIRC_SERIAL_TRANSMITTER
 module_param(txsense, bool, S_IRUGO);
 MODULE_PARM_DESC(txsense, "Sense of transmitter circuit"
 		 " (0 = active high, 1 = active low )");
 #endif
 
 module_param(softcarrier, bool, S_IRUGO);
-MODULE_PARM_DESC(softcarrier, "Software carrier (0 = off, 1 = on)");
+MODULE_PARM_DESC(softcarrier, "Software carrier (0 = off, 1 = on, default on)");
 
 module_param(debug, bool, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(debug, "Enable debugging messages");
-
-#endif /* MODULE */
